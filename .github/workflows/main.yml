name: Deploy To EC2

on:
  push:
    branches: [ "main" ]

env:
  BASE_RESOURCE_PATH: ./src/main/resources/application-prod.yml

permissions: write-all

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application-prod.yml 파일 생성
        run: |
          mkdir -p ./src/main/resources # 디렉토리가 없으면 생성
          echo "${{ secrets.APPLICATION_PROD }}" | base64 --decode > ./src/main/resources/application-prod.yml

      - name: application-prod.yml 파일 내용 확인
        run: cat ./src/main/resources/application-prod.yml

      - name: gradlew에 실행 권한 부여하기
        run: chmod +x ./gradlew
      - name: 테스트 및 빌드하기
        run: ./gradlew clean build --no-build-cache -x test

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Docker 이미지 생성
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/team3:latest .

      - name: docker hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/team3:latest

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PEM_KEY }}
          script: |
            cd /home/ec2-user/backend
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/team3:latest
            docker stop team3 || true
            docker rm team3 || true
            docker run -d \
              --name team3 \
              -p 8080:8080 \
              ${{ secrets.DOCKERHUB_USERNAME }}/team3:latest
